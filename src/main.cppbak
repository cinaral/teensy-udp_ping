#include <Arduino.h>
#include <NativeEthernet.h>
#include <NativeEthernetUdp.h>

//IPAddress ip(192, 168, 1, 101); //* IP address of the Teensy

unsigned int localPort = 8888; //* local port to listen on

char packetBuffer[UDP_TX_PACKET_MAX_SIZE]; //* buffer to hold incoming packet,
char ReplyBuffer[] = "acknowledged";       //* a string to send back

EthernetUDP Udp; //* EthernetUDP instance to send/receive packets over UDP

void teensyMAC(uint8_t (&mac)[6]);

void
setup()
{
	uint8_t mac[6];
	teensyMAC(mac);

	if (Ethernet.hardwareStatus() == EthernetNoHardware) {
		delay(1000); //* do nothing, no point running without Ethernet hardware
		Serial.println("Ethernet shield was not found.");
	} else {
		Ethernet.begin(mac); //* start ethernetip
		Udp.begin(localPort);    //* start UDP
	}
}

void
loop()
{
	// if there's data available, read a packet

	if (Ethernet.linkStatus() == LinkOFF) {
		Serial.println("Ethernet cable is not connected.");
		uint8_t mac[6];
		teensyMAC(mac);
		delay(1000);
	} else {
		int packetSize = Udp.parsePacket();
		//Serial.println("Udp is up");
		if (packetSize) {
			Serial.print("Received packet of size ");
			Serial.println(packetSize);
			Serial.print("From ");
			IPAddress remote = Udp.remoteIP();
			for (int i = 0; i < 4; i++) {
				Serial.print(remote[i], DEC);
				if (i < 3) {
					Serial.print(".");
				}
			}
			Serial.print(", port ");
			Serial.println(Udp.remotePort());

			// read the packet into packetBufffer
			Udp.read(packetBuffer, UDP_TX_PACKET_MAX_SIZE);
			Serial.println("Contents:");
			Serial.println(packetBuffer);

			// send a reply to the IP address and port that sent us the packet we
			// received
			Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
			Udp.write(ReplyBuffer);
			Udp.endPacket();
		}
		delay(10);
	}
}

//* https://forum.pjrc.com/threads/62932-Teensy-4-1-MAC-Address?p=252049&viewfull=1#post252049
void
teensyMAC(uint8_t (&mac)[6])
{
	for (uint8_t by = 0; by < 2; by++) {
		mac[by] = (HW_OCOTP_MAC1 >> ((1 - by) * 8)) & 0xFF;
	}

	for (uint8_t by = 0; by < 4; by++) {
		mac[by + 2] = (HW_OCOTP_MAC0 >> ((3 - by) * 8)) & 0xFF;
	}
	Serial.printf("MAC: %02x:%02x:%02x:%02x:%02x:%02x\n", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
}
